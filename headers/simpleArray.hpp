/* **************************************************************************************************** */

#pragma once

/* **************************************************************************************************** */

#include "./types.hpp"

/* **************************************************************************************************** */

#include <cassert>
#include <cstdlib>

/* **************************************************************************************************** */

template<typename T>
    class simpleArray {
        public:
             simpleArray(u32);
            ~simpleArray();

            void insert(T);
            void insertPoint(T, T, T, T);

            T* raw();
            u64 size();
            u64 size_of();

        private:
            void reserve();

            T* m_data = nullptr;
            u64 m_size = 0;
            u64 m_capacity = 0;
            u64 m_currentIdx;
            u64 m_sizeof;
    };

/* **************************************************************************************************** */

template class simpleArray<i32>;
template class simpleArray<f32>;

/* **************************************************************************************************** */