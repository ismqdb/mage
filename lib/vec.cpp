/* **************************************************************************************************** */

#include "../headers/vec.hpp"

/* **************************************************************************************************** */

mage::vec3::vec3(){
    x = 0;
    y = 0;
    z = 0;
}

mage::vec3::vec3(real a, real b, real c){
    x = a;
    y = b;
    z = c;
}

/* **************************************************************************************************** */

void mage::vec3::invert(){
    x = -x;
    y = -y;
    z = -z;
}

/* **************************************************************************************************** */

real mage::vec3::magnitude(){
    return rsqrt(x*x + y*y + z*z);
}

/* **************************************************************************************************** */

real mage::vec3::squareMagnitude(){
    return x*x + y*y + z*z;
}

/* **************************************************************************************************** */

void mage::vec3::normalize(){
    real l = magnitude();

    if(l > 0)
        (*this) *= ((real)1)/l;
}

/* **************************************************************************************************** */

void mage::vec3::operator*=(real value){
    x *= value;
    y *= value;
    z *= value;
}

/* **************************************************************************************************** */

mage::vec3 mage::vec3::operator*(real value) {
    return mage::vec3(x * value, y * value, z * value);
}

/* **************************************************************************************************** */

void mage::vec3::operator+=(vec3& other){
    x += other.x;
    y += other.y;
    z += other.z;
}

/* **************************************************************************************************** */

mage::vec3 mage::vec3::operator+(vec3& other){
    return vec3(x + other.x, y + other.y, z + other.z);
}

/* **************************************************************************************************** */

void mage::vec3::operator-=(vec3& other){
    x -= other.x;
    y -= other.y;
    z -= other.z;
}

/* **************************************************************************************************** */

mage::vec3 mage::vec3::operator-(vec3& other){
    return vec3(x - other.x, y - other.y, z - other.z);
}

/* **************************************************************************************************** */

void mage::vec3::addScaledVec(vec3& other, real scale){
    x += (other.x * scale);
    y += (other.y * scale);
    z += (other.z * scale);
}

/* **************************************************************************************************** */

mage::vec3 mage::vec3::componentProduct(mage::vec3& other){
    return vec3(x * other.x, y * other.y, z * other.z);
}

/* **************************************************************************************************** */

void mage::vec3::componentProductUpdate(vec3& other){
    x *= other.x;
    y *= other.y;
    z *= other.z;
}

/* **************************************************************************************************** */

real mage::vec3::scalarProduct(vec3& other) {
    return x * other.x + y * other.y + z * other.z;
}

/* **************************************************************************************************** */